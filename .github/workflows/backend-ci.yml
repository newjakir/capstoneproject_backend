name: Django CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_IMAGE: newjakir/3-tire-back

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Enable swap to prevent OOM (optional)
        run: |
          sudo fallocate -l 2G /swapfile
          sudo chmod 600 /swapfile
          sudo mkswap /swapfile
          sudo swapon /swapfile
          free -h

      - name: Verify Docker Compose available
        run: docker compose version

      - name: Build and start services
        env:
          POSTGRES_DB: ${{ vars.POSTGRES_DB }}
          POSTGRES_USER: ${{ vars.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
          STRIPE_PUBLIC_KEY: ${{ secrets.STRIPE_PUBLIC_KEY }}
          STRIPE_WEBHOOK_SECRET: ${{ secrets.STRIPE_WEBHOOK_SECRET }}
          SITE_URL: ${{ secrets.SITE_URL }}
          FRONTEND_SITE_URL: ${{ secrets.FRONTEND_SITE_URL }}
          DJANGO_SUPERUSER_USERNAME: ${{ secrets.DJANGO_SUPERUSER_USERNAME }}
          DJANGO_SUPERUSER_EMAIL: ${{ secrets.DJANGO_SUPERUSER_EMAIL }}
          DJANGO_SUPERUSER_PASSWORD: ${{ secrets.DJANGO_SUPERUSER_PASSWORD }}

        run: docker compose -f docker-compose.yml up -d --build

      - name: Wait for DB to be healthy
        run: |
          for i in {1..10}; do
            STATUS=$(docker inspect --format='{{.State.Health.Status}}' postgres-db)
            if [ "$STATUS" = "healthy" ]; then
              echo "Postgres is healthy."
              break
            else
              echo "Waiting for Postgres to be healthy..."
              sleep 5
            fi
          done

      - name: Run Django tests inside container
        run: docker exec 3-tire-back /app/venv1/bin/python manage.py test

      - name: Print logs if test fails
        if: failure()
        run: docker compose logs

      - name: Stop and remove containers
        run: docker compose down -v

  docker-build-and-push:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        run: |
          docker build -t $DOCKER_IMAGE:latest .
          docker push $DOCKER_IMAGE:latest
